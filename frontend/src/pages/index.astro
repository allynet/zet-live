---
import BaseHead from "../components/BaseHead.astro";
---

<html lang="en">
  <head>
    <BaseHead title="Live view" />
    <link rel="preconnect" href="https://cdn.allypost.net" />
    <link rel="preconnect" href="https://a.basemaps.cartocdn.com" />
    <link rel="preconnect" href="https://b.basemaps.cartocdn.com" />
    <link rel="preconnect" href="https://c.basemaps.cartocdn.com" />
    <link rel="preconnect" href="https://d.basemaps.cartocdn.com" />
    <link rel="preconnect" href="https://tiles.openfreemap.org" />
    <link
      rel="stylesheet"
      href="https://cdn.allypost.net/pkg/font/IosevkAlly/full-family.css"
    />
    <style>
      body {
        margin: 0;
        padding: 0;
      }
      html,
      body,
      #map {
        height: 100%;
      }

      body,
      .maplibregl-map {
        font-family: "IosevkAllyP", sans-serif;
      }
    </style>
    <style is:global>
      .not-following {
        z-index: 0;
      }
      .not-following .vehicle-marker {
        opacity: 0.1;
      }

      .following {
        z-index: 500;
      }

      .vehicle-marker {
        display: flex;
        aspect-ratio: 1;
        align-items: center;
        justify-content: center;
        background-color: red;
        border-radius: 0.5em;
        transition: opacity 0.25s ease;
        cursor: pointer;
      }

      .vehicle-marker-name {
        flex: 1 0 auto;
        line-height: 1em;
        padding: 0.5rem;
        font-weight: bold;
        font-size: 1rem;
        color: white;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>
      import "maplibre-gl/dist/maplibre-gl.css";
      import {
        Map as MaplibreglMap,
        Marker as MaplibreglMarker,
        NavigationControl,
        GeolocateControl,
        type StyleSpecification,
      } from "maplibre-gl";
      import type { V1Message } from "../app/entity/v1/message";
      import { VehicleV1 } from "../app/entity/v1/vehicle";
      import WorkerScript from "../scripts/worker.ts?worker";
      import type { WorkerResponse } from "../scripts/worker";
      import { API_URL } from "astro:env/client";
      import { StopV1 } from "../app/entity/v1/stop";
      import mapStyle3d from "../data/maps/style/3d.json";

      const apiUrl = API_URL || "/api";

      let MARKER_ID = 1;

      let simpleStops: Record<StopV1["id"], StopV1> = {};
      let stopsGrouped = [] as {
        name: string;
        lat: number;
        lng: number;
        ids: string[];
      }[];
      let activeStopIds = new Set<string>();

      const websocketUrl = (() => {
        const url = new URL(`${apiUrl}/v1/ws`, window.location.href);
        if (url.protocol === "https:") {
          url.protocol = "wss:";
        } else {
          url.protocol = "ws:";
        }
        return url.toString();
      })();

      const worker = new WorkerScript();

      // Initialise the map
      const map = new MaplibreglMap({
        container: "map",
        hash: true,
        style: mapStyle3d as StyleSpecification,
        center: [16, 45.8],
        zoom: 12,
        canvasContextAttributes: {
          antialias: true,
        },
      });
      map.addControl(new NavigationControl());
      // Add geolocate control to the map.
      map.addControl(
        new GeolocateControl({
          positionOptions: {
            enableHighAccuracy: true,
          },
          trackUserLocation: true,
          showAccuracyCircle: true,
          showUserLocation: true,
        })
      );

      map.on("mouseenter", "route-stops", () => {
        map.getCanvas().style.cursor = "pointer";
      });
      map.on("mouseleave", "route-stops", () => {
        map.getCanvas().style.cursor = "";
      });
      map.on("click", "route-stops", async (e) => {
        e.preventDefault();
        const stopIds = JSON.parse(
          e.features?.find((x) => x.properties?.ids)?.properties?.ids ?? "[]"
        ) as string[];

        console.log("Only show vehicles that are at stops", stopIds);
        const queryParams = new URLSearchParams();
        for (const stopId of stopIds) {
          queryParams.append("stop", stopId);
        }
        const trips = (await fetch(
          `${apiUrl}/v1/schedule/stop-trips?${queryParams.toString()}`
        )
          .then((x) => x.json())
          .catch(() => null)) as { d: { stopTrips: string[] } } | null;

        if (!trips) {
          return;
        }

        const tripIds = new Set(trips.d.stopTrips);

        for (const marker of pins.values()) {
          const $marker = marker.getElement();

          if (tripIds.has($marker.dataset.tripId!)) {
            $marker.classList.remove("not-following");
            $marker.classList.add("following");
            continue;
          }

          $marker.classList.add("not-following");
          $marker.classList.remove("following");
        }

        // map.setLayerZoomRange("delta-move-lines", 24, 24);
        // map.setLayerZoomRange("delta-move-lines-arrow", 24, 24);

        const displayedStops = stopIds
          .map((id) => simpleStops[id])
          .filter(Boolean)
          .map((stop) => ({
            name: stop.name,
            lat: stop.lat,
            lng: stop.lng,
            ids: [stop.id],
          }));
        setDisplayedStops(displayedStops);
      });

      map.on("click", (e) => {
        const clickedOnMapCanvas = e.originalEvent.target === map.getCanvas();

        if (clickedOnMapCanvas) {
          clearFollowingMarker();
        }
      });

      const setDisplayedStops = (
        stops: { name: string; lat: number; lng: number; ids: string[] }[]
      ) => {
        // @ts-expect-error
        map.getSource("route-stops")?.setData({
          type: "FeatureCollection",
          features: stops.map((stop) => ({
            type: "Feature",
            properties: {
              name: stop.name,
              ids: JSON.stringify(stop.ids),
            },
            geometry: {
              type: "Point",
              coordinates: [stop.lng, stop.lat],
            },
          })),
        });
      };

      map.on("load", () => {
        console.log("Map loaded");

        map.addSource("delta-move-lines", {
          type: "geojson",
          data: {
            type: "FeatureCollection",
            features: [],
          },
        });
        map.addLayer({
          id: "delta-move-lines",
          type: "line",
          source: "delta-move-lines",
          paint: {
            "line-width": 5,
            // Use a get expression (https://maplibre.org/maplibre-style-spec/expressions/#get)
            // to set the line-color to a feature property value.
            "line-color": ["get", "color"],
            "line-opacity": 0.5,
          },
          layout: {
            "line-join": "round",
            "line-cap": "round",
          },
        });
        map.addLayer({
          id: "delta-move-lines-arrow",
          type: "symbol",
          source: "delta-move-lines",
          layout: {
            "symbol-placement": "line",
            "symbol-avoid-edges": false,
            "symbol-spacing": 1,
            "icon-image": "arrow-head",
            "text-ignore-placement": true,
            "icon-size": 0.25,
            visibility: "visible",
          },
        });

        map.addSource("current-following-route", {
          type: "geojson",
          data: {
            type: "FeatureCollection",
            features: [],
          },
        });
        map.addLayer({
          id: "current-following-route",
          type: "line",
          source: "current-following-route",
          paint: {
            "line-width": 5,
            // Use a get expression (https://maplibre.org/maplibre-style-spec/expressions/#get)
            // to set the line-color to a feature property value.
            "line-color": ["get", "color"],
            "line-opacity": 0.5,
          },
          layout: {
            "line-join": "round",
            "line-cap": "round",
          },
        });
        map.addLayer({
          id: "current-following-route-arrow",
          type: "symbol",
          source: "current-following-route",
          layout: {
            "symbol-placement": "line",
            "symbol-spacing": 1,
            "icon-allow-overlap": true,
            "icon-image": "arrow-head",
            "icon-size": 0.25,
            visibility: "visible",
          },
        });

        setDisplayedStops(stopsGrouped);
        map.addLayer({
          id: "route-stops",
          type: "symbol",
          source: "route-stops",
          layout: {
            // "text-font": ["sans700"],
            // "text-font": ["Noto Sans Bold"],
            "text-font": ["IosevkAlly Bold"],
            "text-field": ["get", "name"],
            "text-variable-anchor": ["top", "bottom", "left", "right"],
            "text-radial-offset": 0.5,
            "text-justify": "auto",
            "text-size": [
              "interpolate",
              ["linear"],
              ["zoom"],
              0,
              7,
              10,
              9,
              12,
              13,
              22,
              30,
            ],
          },
          paint: {
            "text-color": "#000",
            "text-halo-color": "#fff",
            "text-halo-width": [
              "interpolate",
              ["linear"],
              ["zoom"],
              10,
              1,
              14,
              3,
              18,
              3,
              22,
              6,
            ],
            "text-halo-blur": [
              "interpolate",
              ["linear"],
              ["zoom"],
              10,
              0,
              14,
              2,
              18,
              2,
              22,
              3,
            ],
          },
        });
      });

      {
        createArrowHeadImage("#00000077").then((image) => {
          map.addImage("arrow-head", image);
        });
      }

      let followingMarker: MaplibreglMarker | null = null;

      async function setFollowingMarker(data: {
        marker: MaplibreglMarker;
        tripId?: string;
      }) {
        followingMarker = data.marker;
        const $followingMarker = followingMarker.getElement();

        map.setLayerZoomRange("delta-move-lines", 24, 24);
        map.setLayerZoomRange("delta-move-lines-arrow", 24, 24);

        for (const marker of pins.values()) {
          const $marker = marker.getElement();

          if ($marker.id === $followingMarker.id) {
            $marker.classList.remove("not-following");
            $marker.classList.add("following");
            continue;
          }

          $marker.classList.add("not-following");
          $marker.classList.remove("following");
        }

        const tripId = data.tripId || $followingMarker.dataset.tripId;

        if (tripId) {
          await createCurrentFollowingRouteSource(tripId);
        }
      }

      function clearFollowingMarker() {
        followingMarker = null;
        resetCurrentlyFollowingRoute();

        map.setLayerZoomRange("delta-move-lines", 0, 24);
        map.setLayerZoomRange("delta-move-lines-arrow", 0, 24);

        for (const marker of pins.values()) {
          marker.getElement().classList.remove("not-following");
          marker.getElement().classList.remove("following");
        }
      }

      function createMapVehicleMarkerElement(vehicle: VehicleV1) {
        const $container = document.createElement("div");
        $container.id = `vehicle-marker-${MARKER_ID++}`;
        $container.dataset.id = vehicle.id.toString();
        $container.dataset.routeId = vehicle.routeId.toString();
        $container.dataset.tripId = vehicle.tripId;

        const $marker = document.createElement("div");
        $marker.classList.add("vehicle-marker");
        if (vehicle.routeId.toString().length > 2) {
          $marker.style.backgroundColor = "blue";
        }
        $marker.addEventListener("click", () => {
          void setFollowingMarker({
            marker: vehicle.mapEntity!,
            tripId: vehicle.tripId,
          });
        });
        $container.appendChild($marker);

        const $name = document.createElement("div");
        $name.classList.add("vehicle-marker-name");
        $name.textContent = vehicle.routeId.toString();
        $marker.appendChild($name);

        return $container;
      }

      function connectWebSocket() {
        return new Promise<null>((resolve) => {
          console.log("Connecting to WebSocket", websocketUrl);
          const ws = new WebSocket(websocketUrl);

          ws.addEventListener("error", (e) => {
            console.error("WebSocket error", e);
            ws.close();
          });

          ws.addEventListener("close", (e) => {
            console.log("WebSocket closed", e);
            resolve(null);
          });

          ws.addEventListener("open", (e) => {
            console.log("WebSocket opened", e);
          });

          ws.addEventListener("message", (e) => handleWsMessage(e.data));
        });
      }

      function handleWsMessage(eventData: Blob) {
        console.log("Got data", {
          len: eventData.size,
        });

        worker.postMessage({
          type: "process-message",
          data: eventData,
        });
      }

      worker.addEventListener("message", (e) => {
        const response = e.data as WorkerResponse;
        switch (response.type) {
          case "processed-message":
            return processMessage(response.data);
          default:
            return console.error(
              "Unknown message type from worker",
              response.type
            );
        }
      });

      const pins = new Map<unknown, MaplibreglMarker>();

      function processMessage(message: V1Message) {
        if (typeof message.d === "object" && "vehicles" in message.d) {
          const locationPairs = [] as {
            from: [number, number];
            to: [number, number];
            color: string;
          }[];
          const vehicles = message.d.vehicles.map(VehicleV1.fromSimple);

          // Update existing vehicles and add new ones
          for (const v of vehicles) {
            const pin = pins.get(v.getMapId());
            const vehicle = v.setMapEntity(pin);

            const loc = vehicle.mapEntity?.getLngLat()?.toArray();

            vehicle.updateMapEntity(map, createMapVehicleMarkerElement);

            if (loc) {
              locationPairs.push({
                from: loc,
                to: [vehicle.lng, vehicle.lat],
                color: Number(vehicle.routeId) >= 100 ? "#00f" : "#f00",
              });
            }

            pins.set(vehicle.getMapId(), vehicle.mapEntity!);

            if (vehicle.mapEntity === followingMarker) {
              void createCurrentFollowingRouteSource(vehicle.tripId);
            }
          }

          const ids = vehicles.map((v) => v.getMapId());
          const idSet = new Set(ids);
          // Remove vehicles that are no longer in the message
          for (const [id, pin] of pins.entries()) {
            if (!idSet.has(id as never)) {
              pin.remove();
              pins.delete(id);
            }
          }

          // @ts-expect-error
          map.getSource("delta-move-lines")?.setData({
            type: "FeatureCollection",
            features: locationPairs.map((x) => ({
              type: "Feature",
              properties: {
                color: x.color,
              },
              geometry: {
                type: "LineString",
                coordinates: [x.from, x.to],
              },
            })),
          });
        }

        if (typeof message.d === "object" && "activeStops" in message.d) {
          const newActiveStopIds = new Set(message.d.activeStops);
          if (newActiveStopIds.difference(activeStopIds).size > 0) {
            activeStopIds = newActiveStopIds;
            computeAndUpdateGroupedStops();
          }
        }

        if (typeof message.d === "object" && "simpleStops" in message.d) {
          const stops = message.d.simpleStops.map(StopV1.fromSimple);
          console.log("Updating stops");

          simpleStops = Object.fromEntries(
            stops.map((stop) => [stop.id, stop])
          );

          computeAndUpdateGroupedStops();
        }
      }

      function computeAndUpdateGroupedStops() {
        function areaOf(stops: StopV1[]) {
          const lats = stops.map((s) => s.lat);
          const lngs = stops.map((s) => s.lng);

          const minLat = Math.min(...lats);
          const maxLat = Math.max(...lats);
          const minLng = Math.min(...lngs);
          const maxLng = Math.max(...lngs);

          return (maxLat - minLat) * (maxLng - minLng);
        }

        const startThing = window.performance.now();
        type StopsByName = Record<string, StopV1[]>;
        const stopsByName = Object.values(simpleStops).reduce((acc, a) => {
          if (!acc[a.name]) {
            acc[a.name] = [];
          }
          acc[a.name].push(a);
          return acc;
        }, {} as StopsByName);

        requestIdleCallback(() => {
          const stopsByDistance = Object.entries(stopsByName).reduce(
            (acc, [name, stops]) => {
              const stopsGrouped = [] as {
                stops: StopV1[];
              }[];

              for (const stop of stops) {
                if (activeStopIds.size > 0 && !activeStopIds.has(stop.id)) {
                  continue;
                }

                const closeEnoughStop = stopsGrouped.find(
                  (x) => areaOf([stop, ...x.stops]) < 1e-7
                );

                if (closeEnoughStop) {
                  closeEnoughStop.stops.push(stop);
                  continue;
                }

                stopsGrouped.push({
                  stops: [stop],
                });
              }

              acc[name] = stopsGrouped;

              return acc;
            },
            {} as Record<string, { stops: StopV1[] }[]>
          );

          requestIdleCallback(() => {
            stopsGrouped = Object.values(stopsByDistance)
              .flatMap((x) => x.map((y) => y.stops))
              .map((a) => {
                const name = a[0]!.name;
                const avgLat =
                  a.reduce((acc, stop) => acc + stop.lat, 0) / a.length;
                const avgLng =
                  a.reduce((acc, stop) => acc + stop.lng, 0) / a.length;
                const ids = a.map((stop) => stop.id);
                return { name, lat: avgLat, lng: avgLng, ids };
              });

            setDisplayedStops(stopsGrouped);

            console.log(
              "Stops by distance calculated in",
              window.performance.now() - startThing,
              "ms"
            );
          });
        });
      }

      function createArrowHeadImage(color: string) {
        const arrowHeadSvg = (color: string) => `
        <svg width="50" height="50" viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">
          <path d="M 10,10 L 40,25 L 10,40 Z" fill="${color}" stroke="${color}" stroke-width="2" stroke-linejoin="round"/>
        </svg>
        `;
        const arrowHeadSvgBlob = new Blob([arrowHeadSvg(color)], {
          type: "image/svg+xml",
        });
        const arrowHeadImage = new Image(50, 50);
        arrowHeadImage.src = URL.createObjectURL(arrowHeadSvgBlob);

        return new Promise<HTMLImageElement>((resolve) => {
          arrowHeadImage.addEventListener("load", () => {
            resolve(arrowHeadImage);
          });
        });
      }

      async function createCurrentFollowingRouteSource(tripId: string) {
        const shape = (await fetch(`${apiUrl}/v1/schedule/trip-info/${tripId}`)
          .then((x) => x.json())
          .catch(() => null)) as {
          d: {
            stopIds: string[];
            route: [number, number][];
          };
        } | null;

        if (!shape) {
          console.error("Shape not found for trip", tripId);
          return false;
        }

        // @ts-expect-error
        map.getSource("current-following-route")?.setData({
          type: "FeatureCollection",
          features: [
            {
              type: "Feature",
              properties: {
                color: "#f0f",
              },
              geometry: {
                type: "LineString",
                coordinates: shape.d.route,
              },
            },
          ],
        });

        const stops = shape.d.stopIds
          .map((id) => simpleStops[id])
          .filter(Boolean);

        setDisplayedStops(
          stops.map((stop) => ({
            name: stop.name,
            lat: stop.lat,
            lng: stop.lng,
            ids: [stop.id],
          }))
        );

        return true;
      }

      function resetCurrentlyFollowingRoute() {
        // @ts-expect-error
        map.getSource("current-following-route")?.setData({
          type: "FeatureCollection",
          features: [],
        });

        setDisplayedStops(stopsGrouped);
      }

      async function updateStops() {
        let success = false;

        while (!success) {
          success = await fetch(`${apiUrl}/v1/schedule/simple-stops`, {
            headers: {
              accept: "application/cbor,application/json",
            },
          })
            .then((x) => x.arrayBuffer())
            .then((x) => {
              worker.postMessage({
                type: "process-message",
                data: new Blob([x]),
              });
              return true;
            })
            .catch(() => false);

          if (!success) {
            await new Promise((resolve) =>
              setTimeout(resolve, 5000 + 5000 * Math.random())
            );
          }
        }
      }

      updateStops();
      setInterval(updateStops, 60_000 + 60_000 * Math.random());

      while (true) {
        await connectWebSocket();
        const sleepFor = 3000 + 10_000 * Math.random();
        console.log("Sleeping before reconnect", sleepFor);
        await new Promise((resolve) => setTimeout(resolve, sleepFor));
      }
    </script>
  </body>
</html>
